The ``add_integer`` module
==========================

Using ``add_integer``
---------------------

Importing the function from the module:
	>>> add_integer = __import__("0-add_integer").add_integer

Checking for mosule docstring:
	>>> m = __import__("0-add_integer").__doc__
	>>> len(m) > 1
	True

Checking for function docstring:
	>>> f = __import__("0-add_integer").add_integer.__doc__
	>>> len(f) > 1
	True

Passing two positive integers:
	>>> add_integer(2, 3)
	5

Passing only a to the function:
	>>> add_integer(1)
	99

Passing two negative numbers:
	>>> add_integer(-2, -3)
	-5

Passing one negative number and one positive number:
	>>> add_integer(-2, 3)
	1

Passing one negative number:
	>>> add_integer(-8)
	90

Passing two positive floats:
	>>> add_integer(2.3, 3.2)
	5

Passing two negative floats:
	>>> add_integer(-10.3, -11.6)
	-21

Passing one positive and one negative:
	>>> add_integer(10.3 , -11.6)
	-1

Passing one positive float:
	>>> add_integer(2.8)
	100

Passing one negative float:
	>>> add_integer(-8.9)
	90

Testing for non numbers
=======================

passing a string and integer into the function:
	>>> add_integer("3", 10)
	Traceback (most recent call last):
	TypeError: a must be an integer

passing two strings:
	>>> add_integer("3", "3.4")
	Traceback (most recent call last):
	TypeError: a must be an integer

passing an int and a float:
	>>> add_integer(23, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

passing infinity to the function will result in overflow error:
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

passing a None:
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

passing a boolean:
	>>> add_integer(False)
	98

passing a boolean:
	>>> add_integer(True)
	99

passing two boolean:
	>>> add_integer(True, False)
	1
