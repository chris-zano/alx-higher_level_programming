The ``4-print_square`` module
=============================

Using `` 4-print_square``
-------------------------

Importing the function form the module:
	>>> print_square = __import__("4-print_square").print_square

Checking the module docstring:
	>>> m = __import__("4-print_square").__doc__
	>>> len(m) > 1
	True

Checking the function docstring:
	>>> f = __import__("4-print_square").print_square.__doc__
	>>> len(f) > 1
	True

Passing integer to the function:
	>>> print_square(3)
	###
	###
	###

Passing multiple arguments:
	>>> try:
	...	print_square(3, 4)
	... except Exception as e:
	...	print(e) # doctest: +ELLIPSIS
	print_square() takes 1 positional argument but ... were given

Passing no arguments:
	>>> try:
	...	print_square()
	... except Exception as e:
	...	print(e)
	print_square() missing 1 required positional argument: 'size'

Passing float:
	>>> print_square(2.3)
	Traceback (most recent call last):
	TypeError: size must be an integer

Passing a negative number:
	>>> print_square(-2.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

Passing zero:
	>>> print_square(0)
	
Passing negative int:
	>>> try:
	...	print_square(-5)
	... except Exception as e:
	...	print(e)
	size must be >= 0

Passing a string:
	>>> print_square("4")
	Traceback (most recent call last):
	TypeError: size must be an integer
